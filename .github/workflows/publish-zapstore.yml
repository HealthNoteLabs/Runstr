# .github/workflows/release-and-publish.yml
name: Release RUNSTR and Publish to Zapstore

on:
  push:
    branches:
      # Release from main branch (adjust as needed)
      - main
      # Prereleases/builds from updates1 (adjust branch name and prerelease config in .releaserc if needed)
      - updates1
      # Explicitly add the current working branch for testing visibility
  # Enable manual trigger for the Zapstore publish step confirmation
  workflow_dispatch:
    inputs:
      force_version:
        description: 'Force specific version (leave empty to use semantic-release)'
        required: false
        default: ''
      skip_semantic_release:
        description: 'Skip semantic-release process and use forced version'
        type: boolean
        required: false
        default: false

jobs:
  # ================= Release & Build Job =================
  release_and_build:
    runs-on: ubuntu-latest
    outputs:
      # Output whether a release was created by semantic-release
      released: ${{ steps.semantic_release.outputs.released || 'false' }}
      # Output the final version determined (semantic or package.json)
      build_version: ${{ steps.determine_build_version.outputs.build_version }}
      # Output the final APK path for artifact upload/download
      apk_path: ${{ steps.prepare_artifact.outputs.apk_path }}

    permissions:
      contents: write # Allow semantic-release to push commits/tags

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for semantic-release
          # Persist credentials for semantic-release to push
          persist-credentials: true

      # --- Environment Setup ---
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use your project's Node.js version
          cache: 'npm'

      # --- Dependencies ---
      # Assumes semantic-release and plugins are in devDependencies
      - name: Install Node Dependencies
        run: npm install
        
      - name: Install apktool for cleaning # Add apktool install here
        run: |
          echo "Installing apktool via apt..."
          sudo apt-get update -y
          sudo apt-get install -y apktool || { echo "❌ apktool install via apt failed."; exit 1; }
          echo "✅ apktool installed via apt."
          apktool --version || { echo "❌ apktool command not found or failed after install."; exit 1; }

      # --- Semantic Release ---
      # This step determines the version, generates changelog, updates package.json, commits, and tags
      - name: Run Semantic Release
        id: semantic_release
        if: ${{ github.event.inputs.skip_semantic_release != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the default GitHub token
          # Add any other env vars needed by semantic-release plugins if necessary
        run: |
          echo "Running semantic-release..."
          # Run semantic-release. It will analyze commits, update package.json, changelog, commit, and tag if needed.
          # Capture output to check if a release happened and get the version.
          # Use '|| true' to prevent workflow failure if no release is needed.
          npx semantic-release --debug || true

          # Check if a release was published by looking for a new tag
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "none")
          echo "Latest tag found: $LATEST_TAG"

          # Check if package.json was updated (another indicator)
          # This might be fragile if other changes happen concurrently
          if git status --porcelain | grep -q "package.json"; then
             echo "package.json was modified, likely by semantic-release."
             # This isn't a foolproof check for release success, tag check is better
          fi

          # More reliable check: see if the latest tag matches what semantic-release *would* output
          # This requires more complex output parsing from semantic-release, sticking to tag existence for now.

          if [[ "$LATEST_TAG" != "none" ]]; then
            # Check if the latest tag points to the current commit HEAD
            # This confirms semantic-release just created it on this run
            if git rev-parse HEAD | grep -q "$(git rev-list -n 1 $LATEST_TAG)"; then
               echo "✅ New release tag $LATEST_TAG created by semantic-release."
               echo "released=true" >> $GITHUB_OUTPUT
               echo "new_version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT # Store version without 'v' prefix
            else
               echo "ℹ️ Latest tag $LATEST_TAG exists but doesn't point to HEAD. Assuming no new release on this run."
               echo "released=false" >> $GITHUB_OUTPUT
               echo "new_version=unknown" >> $GITHUB_OUTPUT # Set explicitly
            fi
          else
             echo "ℹ️ No tags found or semantic-release determined no release needed."
             echo "released=false" >> $GITHUB_OUTPUT
             echo "new_version=unknown" >> $GITHUB_OUTPUT # Set explicitly
          fi

      # --- Manual Version Creation ---
      - name: Create Manual Release Tag
        id: manual_release
        if: ${{ github.event.inputs.skip_semantic_release == 'true' && github.event.inputs.force_version != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FORCED_VERSION="${{ github.event.inputs.force_version }}"
          echo "Using manually specified version: $FORCED_VERSION"
          
          # Update package.json version
          npm version $FORCED_VERSION --no-git-tag-version
          
          # Create a simple CHANGELOG entry for manual version
          echo "# Release v$FORCED_VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Manual release created on $(date)" >> CHANGELOG.md
          
          # Commit the changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json CHANGELOG.md
          git commit -m "chore(release): $FORCED_VERSION [skip ci]"
          
          # Create and push the tag
          git tag -a "v$FORCED_VERSION" -m "Release v$FORCED_VERSION"
          git push --follow-tags
          
          echo "released=true" >> $GITHUB_OUTPUT
          echo "new_version=$FORCED_VERSION" >> $GITHUB_OUTPUT

      # --- Read Package Version (Fallback/Info) ---
      # Read the version from package.json (might have been updated by semantic-release)
      - name: Read version from package.json
        id: read_package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Version from package.json: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # --- Build Web Assets ---
      # Build the web assets BEFORE syncing with Capacitor
      - name: Build Web App
        run: npm run build

      # --- Capacitor Sync ---
      # Sync web assets AFTER potential package.json version update and AFTER web build
      - name: Sync Capacitor Android Project
        run: npx cap sync android

      # --- Signing Keystore Setup ---
      - name: Configure Keystore from Secret
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          KEYSTORE_DIR=$GITHUB_WORKSPACE/android/app
          KEYSTORE_FILE=$KEYSTORE_DIR/runstr-release-key.keystore
          mkdir -p $KEYSTORE_DIR
          echo "Decoding keystore to $KEYSTORE_FILE"
          echo "$KEYSTORE_BASE64" | base64 --decode > "$KEYSTORE_FILE"
          test -s "$KEYSTORE_FILE" || { echo "❌ Keystore file missing or empty after decode"; exit 1; }
          echo "Keystore configured."

      # --- Determine Final Version for Build ---
      # Use semantic-release version if available, otherwise use package.json version
      - name: Determine Build Version
        id: determine_build_version
        run: |
          SEMANTIC_VERSION="${{ steps.semantic_release.outputs.new_version }}"
          PACKAGE_VERSION="${{ steps.read_package_version.outputs.version }}"
          BUILD_VERSION=""

          if [[ "${{ steps.semantic_release.outputs.released }}" == "true" && "$SEMANTIC_VERSION" != "unknown" ]]; then
             echo "Using version from semantic-release: $SEMANTIC_VERSION"
             BUILD_VERSION="$SEMANTIC_VERSION"
          elif [[ -n "$PACKAGE_VERSION" ]]; then
             echo "Using version from package.json: $PACKAGE_VERSION"
             BUILD_VERSION="$PACKAGE_VERSION"
          else
             FALLBACK_VERSION="0.0.0-sha-${GITHUB_SHA::7}"
             echo "Warning: Could not determine version reliably. Using fallback: $FALLBACK_VERSION"
             BUILD_VERSION="$FALLBACK_VERSION"
          fi
          echo "Final build version: $BUILD_VERSION"
          echo "build_version=$BUILD_VERSION" >> $GITHUB_OUTPUT

      # --- Build ---
      # Changed to packageRelease to build unsigned APK first
      - name: Build Unsigned Release APK Package
        # Add signing properties back - packageRelease needs them defined even if not used for signing here
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        run: |
          cd android
          BUILD_VERSION=${{ steps.determine_build_version.outputs.build_version }}
          echo "Building Unsigned Release APK package version $BUILD_VERSION..."
          # Only package, don't assemble/sign yet
          # Remove signing config props, as signingConfig is removed from build.gradle
          ./gradlew packageRelease \
            -PappVersionName=$BUILD_VERSION # Just pass version name
          echo "Unsigned APK location (expected): android/app/build/outputs/apk/release/app-release-unsigned.apk"
          cd ..

      # --- DEBUG: List build output directory ---
      - name: List APK Output Directory
        run: |
          echo "Listing contents of android/app/build/outputs/apk/release/"
          # Use find to be more robust, list details, ignore errors if dir doesn't exist yet
          find android/app/build/outputs/apk/release/ -maxdepth 1 -ls || echo "Directory android/app/build/outputs/apk/release/ not found or empty."

      # --- Align APK (using original unsigned APK) ---
      - name: Find zipalign
        id: find_zipalign
        run: |
          # Find zipalign in the installed Android SDK build-tools
          # Assuming setup-android action puts build-tools on PATH or typical location
          # Or use the path from the setup-android action if it provides one
          ZIPALIGN_PATH=$(find "$ANDROID_SDK_ROOT/build-tools" -name zipalign -type f | sort -r | head -n 1)
          if [ -z "$ZIPALIGN_PATH" ]; then
            echo "❌ zipalign not found in SDK build-tools."
            # Fallback: Try finding it on PATH
            if command -v zipalign &> /dev/null; then
              ZIPALIGN_PATH=$(command -v zipalign)
              echo "Found zipalign on PATH: $ZIPALIGN_PATH"
            else
              echo "❌ zipalign also not found on PATH. Cannot proceed."
              exit 1
            fi
          fi
          echo "Using zipalign at: $ZIPALIGN_PATH"
          echo "zipalign_path=$ZIPALIGN_PATH" >> $GITHUB_OUTPUT

      - name: Align APK
        id: align_apk
        run: |
          # Use the original unsigned APK path directly
          UNSIGNED_APK="android/app/build/outputs/apk/release/app-release-unsigned.apk"
          # Define output path for the aligned APK
          ALIGNED_APK_PATH="android/app/build/outputs/apk/release/app-release-unsigned-aligned.apk" # Consistent naming
          ZIPALIGN_CMD="${{ steps.find_zipalign.outputs.zipalign_path }}"

          if [ ! -f "$UNSIGNED_APK" ]; then
            echo "❌ Original unsigned APK not found: $UNSIGNED_APK"
            exit 1
          fi

          echo "Aligning $UNSIGNED_APK to $ALIGNED_APK_PATH"
          "$ZIPALIGN_CMD" -v 4 "$UNSIGNED_APK" "$ALIGNED_APK_PATH"

          if [ ! -f "$ALIGNED_APK_PATH" ]; then
            echo "❌ Failed to create aligned APK at $ALIGNED_APK_PATH"
            exit 1
          fi
          echo "✅ APK aligned: $ALIGNED_APK_PATH"
          echo "aligned_apk_path=$ALIGNED_APK_PATH" >> $GITHUB_OUTPUT

      # --- Sign Cleaned, Aligned APK ---
      - name: Find apksigner
        id: find_apksigner
        run: |
          # Find apksigner similar to zipalign
          APKSIGNER_PATH=$(find "$ANDROID_SDK_ROOT/build-tools" -name apksigner -type f | sort -r | head -n 1)
          if [ -z "$APKSIGNER_PATH" ]; then
            echo "❌ apksigner not found in SDK build-tools."
            # Fallback: Try finding it on PATH
            if command -v apksigner &> /dev/null; then
              APKSIGNER_PATH=$(command -v apksigner)
              echo "Found apksigner on PATH: $APKSIGNER_PATH"
            else 
              echo "❌ apksigner also not found on PATH. Cannot proceed."
              exit 1
            fi
          fi
          echo "Using apksigner at: $APKSIGNER_PATH"
          echo "apksigner_path=$APKSIGNER_PATH" >> $GITHUB_OUTPUT

      - name: Sign Final APK
        id: sign_apk
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        run: |
          ALIGNED_APK="${{ steps.align_apk.outputs.aligned_apk_path }}"
          # Define final output name, similar to what assembleRelease would produce
          FINAL_SIGNED_APK="android/app/build/outputs/apk/release/app-release.apk"
          APKSIGNER_CMD="${{ steps.find_apksigner.outputs.apksigner_path }}"
          KEYSTORE_FILE="$GITHUB_WORKSPACE/android/app/runstr-release-key.keystore"

          if [ ! -f "$ALIGNED_APK" ]; then
            echo "❌ Aligned APK not found for signing: $ALIGNED_APK"
            exit 1
          fi
          if [ ! -f "$KEYSTORE_FILE" ]; then
            echo "❌ Keystore file not found: $KEYSTORE_FILE"
            exit 1
          fi

          echo "Signing $ALIGNED_APK using $KEYSTORE_FILE..."
          "$APKSIGNER_CMD" sign \
            --ks "$KEYSTORE_FILE" \
            --ks-key-alias "$SIGNING_KEY_ALIAS" \
            --ks-pass pass:"$SIGNING_STORE_PASSWORD" \
            --key-pass pass:"$SIGNING_KEY_PASSWORD" \
            --out "$FINAL_SIGNED_APK" \
            "$ALIGNED_APK"

          if [ ! -f "$FINAL_SIGNED_APK" ]; then
            echo "❌ Failed to create signed APK at $FINAL_SIGNED_APK"
            exit 1
          fi
          echo "✅ Final signed APK created: $FINAL_SIGNED_APK"
          echo "final_apk_path=$FINAL_SIGNED_APK" >> $GITHUB_OUTPUT

      # --- Prepare Artifact ---
      # Now uses the final signed APK from the previous step
      - name: Prepare release directory and Rename APK
        id: prepare_artifact
        run: |
          mkdir -p ./release
          VERSION=${{ steps.determine_build_version.outputs.build_version }}
          # Use the output from the sign_apk step
          APK_ORIGINAL="${{ steps.sign_apk.outputs.final_apk_path }}"
          APK_RENAMED="./release/runstr-${VERSION}.apk" # Consistent naming

          if [[ ! -f "$APK_ORIGINAL" ]]; then
            echo "❌ Final signed APK not found at $APK_ORIGINAL"
            exit 1
          fi

          echo "Moving $APK_ORIGINAL to $APK_RENAMED"
          mv "$APK_ORIGINAL" "$APK_RENAMED"
          # Clean up intermediate files (optional, runner cleans anyway)
          rm -f ${{ steps.align_apk.outputs.aligned_apk_path }}
          echo "✅ Final APK prepared: $APK_RENAMED"
          echo "apk_path=$APK_RENAMED" >> $GITHUB_OUTPUT # Output path

      - name: Validate APK file
        run: |
          APK_PATH="${{ steps.prepare_artifact.outputs.apk_path }}"
          echo "Validating $APK_PATH"
          test -f "$APK_PATH" || { echo "❌ APK file not found: $APK_PATH"; exit 1; }
          SIZE=$(stat -c%s "$APK_PATH")
          echo "APK size: $SIZE bytes"
          if [ "$SIZE" -lt 100000 ]; then # Check minimum reasonable size
            echo "⚠️ Warning: APK might be too small ($SIZE bytes)"
          fi
          unzip -l "$APK_PATH" | grep -q AndroidManifest.xml || {
            echo "❌ APK appears invalid (no AndroidManifest.xml found)"
            exit 1
          }
          echo "✅ Basic APK structure checked."

      # --- Create GitHub Release ---
      - name: Create GitHub Release and Upload APK
        # Only run if semantic-release created a new version
        if: steps.semantic_release.outputs.released == 'true'
        uses: softprops/action-gh-release@v1
        with:
          # Tag name should match the tag created by semantic-release (usually with 'v' prefix)
          tag_name: v${{ steps.determine_build_version.outputs.build_version }}
          # Name the release using the version
          name: Release v${{ steps.determine_build_version.outputs.build_version }}
          # Use the generated CHANGELOG.md as the release body
          # Ensure semantic-release config includes @semantic-release/changelog plugin
          body_path: CHANGELOG.md
          # Path to the APK file to upload, from the prepare_artifact step
          files: ${{ steps.prepare_artifact.outputs.apk_path }}
          # Publish the release (not a draft)
          draft: false
          # Mark as a non-prerelease (adjust if needed for prerelease branches)
          prerelease: false
        env:
          # Use the default GITHUB_TOKEN for release creation
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: runstr-apk-${{ steps.determine_build_version.outputs.build_version }}
          path: ${{ steps.prepare_artifact.outputs.apk_path }}
          retention-days: 7

      - name: Upload CHANGELOG artifact
        # Always upload CHANGELOG.md if it exists and the job reaches this point
        uses: actions/upload-artifact@v4
        with:
           name: changelog-${{ steps.determine_build_version.outputs.build_version }}
           path: CHANGELOG.md
           if-no-files-found: warn # Don't fail if CHANGELOG.md is somehow missing
           retention-days: 7

      - name: Clean up Keystore
        if: ${{ always() }} # Always run this step
        run: |
          echo "Removing keystore file..."
          rm -f $GITHUB_WORKSPACE/android/app/runstr-release-key.keystore

  # ================= Zapstore Publish Job =================
  publish_zapstore:
    needs: release_and_build # Depends on the release and build job
    runs-on: ubuntu-latest
    # Add environment for manual approval

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          # Use the consistent build_version output from the previous job
          name: runstr-apk-${{ needs.release_and_build.outputs.build_version }}
          path: ./release # Download into a release directory

      - name: List downloaded files
        run: ls -lR ./release

      # --- Install Zapstore Tools ---
      - name: Install ZapStore CLI and apktool # Keep one valid version of this step
        run: |
          echo "Installing Zapstore CLI..."
          ZAP_CLI_URL="https://cdn.zapstore.dev/0d684425c4bbd3fdecc58f7bf7fc55366d71b8ded9d68b3bbfcb3fcca1072325"
          curl -L -o zapstore "$ZAP_CLI_URL"
          chmod +x zapstore
          sudo mv zapstore /usr/local/bin/
          zapstore --version || { echo "❌ Zapstore CLI install failed."; exit 1; }
          echo "✅ Zapstore CLI installed."

          # Force manual installation of apktool
          echo "Installing apktool manually..."
          APKTOOL_VERSION="2.9.3" # Use a known compatible version
          APKTOOL_JAR_URL="https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_${APKTOOL_VERSION}.jar"
          APKTOOL_WRAPPER_URL="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool"
          echo "Downloading apktool jar from $APKTOOL_JAR_URL"
          curl -L -o apktool.jar "$APKTOOL_JAR_URL" || { echo "❌ Failed to download apktool jar"; exit 1; }
          echo "Downloading apktool wrapper script from $APKTOOL_WRAPPER_URL"
          curl -L -o apktool "$APKTOOL_WRAPPER_URL" || { echo "❌ Failed to download apktool wrapper"; exit 1; }
          chmod +x apktool
          sudo mv apktool /usr/local/bin/
          sudo mv apktool.jar /usr/local/bin/
          echo "✅ apktool manually installed to /usr/local/bin/"

          # Verify apktool installation rigorously
          echo "Verifying apktool installation..."
          apktool --version || { echo "❌ apktool command not found or failed after manual install."; exit 1; }
          echo "✅ apktool verification successful."

      - name: Install Android apksigner tool
        run: |
          sudo apt-get update -y && sudo apt-get install -y unzip wget default-jre # JRE needed by apksigner
          echo "Downloading Android Build Tools..."
          # Use a known reliable version, adjust if needed
          BUILD_TOOLS_VERSION="33.0.2"
          wget -q https://dl.google.com/android/repository/build-tools_r${BUILD_TOOLS_VERSION}-linux.zip -O /tmp/build-tools.zip || \
            { echo "❌ Failed to download Android Build Tools ${BUILD_TOOLS_VERSION}"; exit 1; }
          unzip -q /tmp/build-tools.zip -d /tmp/build-tools
          APKSIGNER_PATH=$(find /tmp/build-tools -name apksigner -type f | head -n 1)
          if [ -z "$APKSIGNER_PATH" ]; then
             echo "❌ apksigner not found in downloaded build tools."
             exit 1
          fi
          echo "✅ apksigner found at: $APKSIGNER_PATH"
          echo "APKSIGNER_PATH=$APKSIGNER_PATH" >> $GITHUB_ENV
          chmod +x "$APKSIGNER_PATH"

      # --- Find aapt2 for inspection ---
      - name: Find aapt2 # Keep one valid version of this step
        id: find_aapt2
        run: |
          # Find aapt2 similar to apksigner
          AAPT2_PATH=$(find /tmp/build-tools -name aapt2 -type f | head -n 1)
          if [ -z "$AAPT2_PATH" ]; then
            echo "❌ aapt2 not found in downloaded build tools."
            # Attempt to find in SDK ROOT as fallback
            ALT_AAPT2_PATH=$(find "$ANDROID_SDK_ROOT/build-tools" -name aapt2 -type f | sort -r | head -n 1)
            if [ -n "$ALT_AAPT2_PATH" ]; then
               AAPT2_PATH="$ALT_AAPT2_PATH"
               echo "Found aapt2 in SDK build-tools: $AAPT2_PATH"
            else
               echo "❌ aapt2 also not found in SDK build-tools. Cannot proceed with badging."
               # Don't exit, allow publish to attempt anyway, but store empty path
               AAPT2_PATH=""
            fi
          fi
          if [ -n "$AAPT2_PATH" ]; then
             echo "Using aapt2 at: $AAPT2_PATH"
             chmod +x "$AAPT2_PATH"
          fi
          echo "aapt2_path=$AAPT2_PATH" >> $GITHUB_OUTPUT

      # --- Prepare Zapstore Metadata ---
      - name: Create zapstore.yaml and Basic Release Notes
        run: |
          VERSION=${{ needs.release_and_build.outputs.build_version }}
          # Define filenames and paths
          ROOT_ZAPSTORE_YAML="$GITHUB_WORKSPACE/zapstore.yaml"
          ROOT_LOGO_PNG="$GITHUB_WORKSPACE/runstr-logo.png"
          RELEASE_DIR="./release" # Use variable for clarity
          ICON_FILENAME="runstr_logo.png" # Consistent icon filename in release dir
          NOTES_FILENAME="release_notes.md"
          ZAPSTORE_YAML_FILENAME="zapstore.yaml" # Filename in release dir

          echo "=== Preparing Metadata in $RELEASE_DIR ==="
          echo "Version: $VERSION"
          echo "Release Directory: $RELEASE_DIR"
          echo "Expected Root Zapstore Config: $ROOT_ZAPSTORE_YAML"
          echo "Expected Root Logo: $ROOT_LOGO_PNG"

          cd $RELEASE_DIR # Work inside the release directory
          echo "Current directory: $(pwd)"

          # --- Find APK ---
          echo "--- Finding APK file ---"
          ACTUAL_APK_FILE=$(find . -maxdepth 1 -name 'runstr-*.apk' -print -quit)
          if [ -z "$ACTUAL_APK_FILE" ]; then
            echo "❌ Downloaded APK file (runstr-*.apk) not found in $RELEASE_DIR directory!"
            ls -lR . # List contents for debugging
            exit 1
          fi
          ACTUAL_APK_FILENAME=$(basename "$ACTUAL_APK_FILE")
          echo "✅ Found APK: $ACTUAL_APK_FILENAME (full path: $(pwd)/$ACTUAL_APK_FILENAME)"

          # --- Copy and Verify zapstore.yaml ---
          echo "--- Processing $ZAPSTORE_YAML_FILENAME ---"
          echo "Checking for root config: $ROOT_ZAPSTORE_YAML"
          if [ ! -f "$ROOT_ZAPSTORE_YAML" ]; then
              echo "❌ Root $ZAPSTORE_YAML_FILENAME not found at $ROOT_ZAPSTORE_YAML!"
              exit 1
          fi
          echo "Copying $ROOT_ZAPSTORE_YAML to $(pwd)/$ZAPSTORE_YAML_FILENAME"
          cp "$ROOT_ZAPSTORE_YAML" "./$ZAPSTORE_YAML_FILENAME"
          if [ ! -f "./$ZAPSTORE_YAML_FILENAME" ]; then
            echo "❌ Error: Failed to copy $ZAPSTORE_YAML_FILENAME to $(pwd)"
            exit 1
          fi
          echo "✅ Copied $ZAPSTORE_YAML_FILENAME to $(pwd)"
          echo "--- Original $ZAPSTORE_YAML_FILENAME contents ---"
          cat "./$ZAPSTORE_YAML_FILENAME"
          echo "------------------------------------------"

          # --- Copy and Verify Logo ---
          echo "--- Processing $ICON_FILENAME ---"
          echo "Checking for root logo: $ROOT_LOGO_PNG"
          if [ ! -f "$ROOT_LOGO_PNG" ]; then
              echo "❌ Root logo file not found at $ROOT_LOGO_PNG!"
              exit 1
          fi
          echo "Copying $ROOT_LOGO_PNG to $(pwd)/$ICON_FILENAME"
          cp "$ROOT_LOGO_PNG" "./$ICON_FILENAME"
          if [ ! -f "./$ICON_FILENAME" ]; then
            echo "❌ Error: Failed to copy $ICON_FILENAME to $(pwd)"
            exit 1
          fi
          echo "✅ Copied $ICON_FILENAME to $(pwd)"

          # --- Modify zapstore.yaml to use local icon ---
          echo "--- Modifying $ZAPSTORE_YAML_FILENAME to use local icon: $ICON_FILENAME ---"
          # Replace the line containing 'url:' under 'icons:' with the local filename
          # Using simple sed; adjust if your yaml structure is more complex
          # This assumes the icon section looks somewhat like:
          # icons:
          #   - url: https://...
          #     type: image/png
          # It will replace the url line with 'file: runstr_logo.png'
          sed -i "/icons:/,/^[^[:space:]]/{ s|url:.*|file: $ICON_FILENAME|g }" "./$ZAPSTORE_YAML_FILENAME"
          echo "✅ Modified $ZAPSTORE_YAML_FILENAME."
          echo "--- Modified $ZAPSTORE_YAML_FILENAME contents ---"
          cat "./$ZAPSTORE_YAML_FILENAME"
          echo "-------------------------------------------"


          # --- Create Release Notes ---
          echo "--- Creating Release Notes ($NOTES_FILENAME) ---"
          echo "# Release v$VERSION" > "$NOTES_FILENAME"
          echo "" >> "$NOTES_FILENAME"
          echo "See repository CHANGELOG.md for full details." >> "$NOTES_FILENAME"
          # Check if notes file was created
          if [ ! -f "./$NOTES_FILENAME" ]; then
             echo "❌ Error: Failed to create $NOTES_FILENAME in $(pwd)"
             exit 1
          fi
          echo "✅ Created $NOTES_FILENAME:"
          cat "$NOTES_FILENAME"

          # --- Set Environment Variables ---
          echo "--- Setting Environment Variables ---"
          echo "Setting APK_FILENAME=$ACTUAL_APK_FILENAME"
          echo "APK_FILENAME=$ACTUAL_APK_FILENAME" >> $GITHUB_ENV
          echo "Setting ICON_FILENAME=$ICON_FILENAME"
          echo "ICON_FILENAME=$ICON_FILENAME" >> $GITHUB_ENV
          echo "Setting NOTES_FILENAME=$NOTES_FILENAME"
          echo "NOTES_FILENAME=$NOTES_FILENAME" >> $GITHUB_ENV
          echo "✅ Environment variables set."

          # --- Final Check ---
          echo "--- Final contents of $RELEASE_DIR before exiting step ---"
          ls -lR .
          echo "----------------------------------------------------------"

          cd .. # Return to workspace root
          echo "Current directory after returning: $(pwd)"

      # --- APKTool Decode for Debugging ---
      - name: Decode APK and Log apktool.yml Before Publish
        id: decode_for_debug
        run: |
          cd ./release
          ACTUAL_APK_FILE=$(find . -maxdepth 1 -name 'runstr-*.apk' -print -quit)
          if [ -z "$ACTUAL_APK_FILE" ]; then
            echo "❌ Downloaded APK file (runstr-*.apk) not found in ./release directory for decoding!"
            exit 1
          fi
          ACTUAL_APK_FILENAME=$(basename "$ACTUAL_APK_FILE")
          DECODE_DIR="decoded_apk_debug"
          
          echo "Decoding $ACTUAL_APK_FILENAME into $DECODE_DIR for inspection..."
          apktool d "$ACTUAL_APK_FILENAME" -o "$DECODE_DIR" -f || echo "⚠️ apktool decode failed, attempting to continue..."
          
          APKTOOL_YAML_PATH="$DECODE_DIR/apktool.yml"
          if [ -f "$APKTOOL_YAML_PATH" ]; then
             echo "--- Contents of $APKTOOL_YAML_PATH ---"
             cat "$APKTOOL_YAML_PATH"
             echo "------------------------------------"
          else
             echo "apktool.yml not found in $DECODE_DIR after decode attempt."
          fi
          echo "APK_FILENAME_FOR_PUBLISH=$ACTUAL_APK_FILENAME" >> $GITHUB_ENV # Pass the name to the next step
          cd .. # Return to workspace root

      # --- Cleanup Before Publish ---
      - name: Clean up potential intermediate files
        run: |
          echo "Cleaning up ./release directory..."
          rm -f ./release/apktool.yml ./release/decoded_apk_debug/apktool.yml
          rm -rf ./release/decoded_apk_debug 
          echo "Contents of ./release after cleanup:"
          ls -l ./release
      
      # --- Inspect Final APK ---
      - name: Inspect APK Badging before Publish
        if: steps.find_aapt2.outputs.aapt2_path != '' # Only run if aapt2 was found
        env:
           # Get APK filename from the decode step's env var
           APK_FILENAME_ENV: ${{ steps.decode_for_debug.outputs.APK_FILENAME_FOR_PUBLISH || env.APK_FILENAME }} 
        run: |
           cd ./release
           AAPT2_CMD="${{ steps.find_aapt2.outputs.aapt2_path }}"
           # Use the env var passed down from decode step
           APK_FILE="$APK_FILENAME_ENV" 

           if [ -z "$APK_FILE" ]; then
             echo "❌ APK_FILENAME_ENV environment variable not set or empty."
             # Fallback to finding it again if needed? Better to rely on the previous step.
             APK_FILE=$(find . -maxdepth 1 -name 'runstr-*.apk' -print -quit)
             if [ -z "$APK_FILE" ]; then
                echo "❌ Fallback failed: APK file (runstr-*.apk) not found in ./release directory for inspection."
                exit 1
             fi
             echo "Used fallback to find APK: $APK_FILE"
           fi
           
           if [ ! -f "$APK_FILE" ]; then
             echo "❌ APK file '$APK_FILE' not found in ./release directory for inspection."
             exit 1
           fi

           echo "--- Dumping badging info for $APK_FILE using $AAPT2_CMD ---"
           "$AAPT2_CMD" dump badging "$APK_FILE" || echo "⚠️ Failed to dump badging info."
           echo "---------------------------------------------------------"
           cd .. # Return to workspace root
      
      # --- Publish ---
      - name: Publish to Zapstore with Detailed Error Logging
        env:
          NSEC: ${{ secrets.NSEC }}
          APKSIGNER_PATH: ${{ env.APKSIGNER_PATH }}
          VERSION: ${{ needs.release_and_build.outputs.build_version }}
          # Get APK filename from the decode step's env var
          APK_FILENAME: ${{ steps.decode_for_debug.outputs.APK_FILENAME_FOR_PUBLISH || env.APK_FILENAME }}
          # Make sure these are still available or set earlier in this job
          ICON_FILENAME: ${{ env.ICON_FILENAME || 'runstr_logo.png' }} 
          NOTES_FILENAME: ${{ env.NOTES_FILENAME || 'release_notes.md' }} 
        run: |
          cd ./release # Navigate into the directory with assets

          # Re-check required env vars are set
          if [ -z "$APK_FILENAME" ] || [ -z "$ICON_FILENAME" ] || [ -z "$NOTES_FILENAME" ]; then
             echo "❌ Error: Missing required filename env vars (APK_FILENAME, ICON_FILENAME, NOTES_FILENAME)"
             echo "APK: $APK_FILENAME, ICON: $ICON_FILENAME, NOTES: $NOTES_FILENAME"
             exit 1
          fi

          echo "Publishing v${VERSION} to Zapstore using apksigner at $APKSIGNER_PATH..."
          echo "Icon file: ${ICON_FILENAME}"
          echo "APK file: ${APK_FILENAME}"
          echo "Notes file: ${NOTES_FILENAME}"

          # Check files exist before publishing
          test -f "${ICON_FILENAME}" || { echo "❌ Icon file '${ICON_FILENAME}' not found!"; exit 1; }
          test -f "${APK_FILENAME}" || { echo "❌ APK file '${APK_FILENAME}' not found!"; exit 1; }
          test -f "${NOTES_FILENAME}" || { echo "❌ Notes file '${NOTES_FILENAME}' not found!"; exit 1; }

          # Verify APK has a signature (optional check)
          if [ -f "${APK_FILENAME}" ]; then
            echo "Checking APK signature..."
            if unzip -l "${APK_FILENAME}" | grep -q "META-INF/.*\\.RSA"; then
              echo "✅ APK appears to be signed (found .RSA files)"
            else
              echo "⚠️ Warning: APK may not be properly signed (no .RSA files found)"
            fi
          fi

          # Attempt to publish to Zapstore, capture output and exit code
          echo "Attempting to publish to Zapstore..."
          set +e # Prevent script from exiting immediately on error
          PUBLISH_OUTPUT=$(APKSIGNER_PATH="$APKSIGNER_PATH" zapstore publish runstr \
            --daemon-mode \
            --overwrite-app \
            --overwrite-release \
            --icon "${ICON_FILENAME}" \
            -n "${NOTES_FILENAME}" \
            -a "${APK_FILENAME}" \
            -v "${VERSION}" 2>&1) # Redirect stderr to stdout to capture all output
          PUBLISH_EXIT_CODE=$?
          set -e # Re-enable immediate exit on error

          echo "--- Zapstore Publish Output --- ($PUBLISH_EXIT_CODE)"
          echo "$PUBLISH_OUTPUT"
          echo "-------------------------------"

          if [ $PUBLISH_EXIT_CODE -ne 0 ]; then
            echo "❌ Zapstore publish failed with exit code $PUBLISH_EXIT_CODE"
            # Add more specific logging here if needed based on common errors
            if echo "$PUBLISH_OUTPUT" | grep -q "invalid apk metadata"; then
               echo "Failure seems related to APK metadata as suspected."
            fi
             # Consider adding more error checks based on output
            exit $PUBLISH_EXIT_CODE # Ensure the step fails with the original exit code
          else
            echo "✅ Successfully published version ${VERSION} to Zapstore!"
          fi

      - name: ✅ Notify success
        if: ${{ success() }}
        run: |
          echo "🎉 RUNSTR v${{ needs.release_and_build.outputs.build_version }} published to Zapstore!"
          echo "🔗 https://zapstore.dev/app/runstr"