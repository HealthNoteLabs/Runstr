name: Build, Sign and Release to Zap.Store

on:
  push:
    branches:
      - Simple-updates
      - updates1
  workflow_dispatch:

jobs:
  build:
    name: Build, Sign and Release APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Java 17 specifically for Zap.Store compatibility
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Verify Java version
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          javac -version

      - name: Install dependencies
        run: |
          npm ci
          # Install Capacitor CLI globally
          npm install -g @capacitor/cli
          # Install specific capacitor packages
          npm install @capacitor/android @capacitor/core
          # List installed packages to verify Capacitor installation
          npm list --depth=1 | grep -i capacitor

      # Extract version and generate release tag
      - name: Configure version information
        id: version_info
        run: |
          echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
          echo "RELEASE_TAG=feed-${{ env.VERSION }}-${{ env.DATE }}" >> $GITHUB_ENV

      # Build the React app
      - name: Build React app
        run: npm run build

      # Generate keystore for signing
      - name: Generate Keystore
        id: generate_keystore
        run: |
          # Check if KEY_ALIAS, KEY_STORE_PASSWORD, and KEY_PASSWORD are set
          if [ -z "${{ secrets.KEY_ALIAS }}" ] || [ -z "${{ secrets.KEY_STORE_PASSWORD }}" ] || [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "Error: Required secrets (KEY_ALIAS, KEY_STORE_PASSWORD, KEY_PASSWORD) are not set"
            exit 1
          fi
          
          keytool -genkey -v -keystore release.keystore \
            -alias ${{ secrets.KEY_ALIAS }} \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass ${{ secrets.KEY_STORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            -dname "cn=Unknown, ou=Unknown, o=Unknown, c=US"
          
          # Make a copy of the keystore in android/app/ directory
          mkdir -p android/app/
          cp release.keystore android/app/release.keystore

      # Setup Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Debug project structure
      - name: Debug project structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Package.json content:"
          cat package.json
          echo "Capacitor config:"
          cat capacitor.config.ts || cat capacitor.config.js || cat capacitor.config.json || echo "No capacitor config found"
          echo "node_modules structure:"
          ls -la node_modules/@capacitor || echo "No @capacitor in node_modules"

      # Proper Capacitor setup with clean structure
      - name: Setup Capacitor Android platform
        run: |
          # Remove any existing Android platform
          rm -rf android || true
          
          # Create fresh capacitor config if needed
          if [ ! -f "capacitor.config.ts" ] && [ ! -f "capacitor.config.js" ] && [ ! -f "capacitor.config.json" ]; then
            echo "Creating basic capacitor config"
            echo "import { CapacitorConfig } from '@capacitor/cli';" > capacitor.config.ts
            echo "" >> capacitor.config.ts
            echo "const config: CapacitorConfig = {" >> capacitor.config.ts
            echo "  appId: 'com.runstr.app'," >> capacitor.config.ts
            echo "  appName: 'Runstr'," >> capacitor.config.ts
            echo "  webDir: 'build'," >> capacitor.config.ts
            echo "  bundledWebRuntime: false" >> capacitor.config.ts
            echo "};" >> capacitor.config.ts
            echo "" >> capacitor.config.ts
            echo "export default config;" >> capacitor.config.ts
          fi
          
          # Add Android platform
          npx cap add android
          
          # Copy web assets to Android
          npx cap copy android
          
          # Make sure the cordova plugin directory exists
          mkdir -p android/capacitor-cordova-android-plugins/src/main/libs
          
          # Make sure the app directory structure is correct
          mkdir -p android/app/libs
          
          # Check if Android platform was created successfully
          ls -la android || (echo "Android directory not created" && exit 1)
          
          # Show detailed Android structure for debugging
          find android -type d | sort

      # Prepare Android project for Java 17 compatibility
      - name: Configure Android project for Java 17
        run: |
          # Create gradle.properties with Java 17 settings
          echo "org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED" > android/gradle.properties
          echo "org.gradle.java.home=${JAVA_HOME}" >> android/gradle.properties
          echo "android.useAndroidX=true" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
          echo "kotlin.jvm.target.validation.mode=warning" >> android/gradle.properties
          echo "org.gradle.caching=true" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          
          # Process the build.gradle file using a simpler approach less prone to syntax errors
          # First make a backup
          cp android/app/build.gradle /tmp/build.gradle.original
          
          # Display the original file for debugging
          echo "Original app/build.gradle content:"
          cat /tmp/build.gradle.original
          
          # Use sed to completely remove all Google Services related sections
          sed -i '/try {/,/google-services plugin not applied/d' android/app/build.gradle
          sed -i '/\/\/ Simple Google Services check/,/^}/d' android/app/build.gradle
          
          # Add our simplified Google Services implementation at the end of the file
          echo "" >> android/app/build.gradle
          echo "// Simple Google Services check" >> android/app/build.gradle
          echo "if (file('google-services.json').exists()) {" >> android/app/build.gradle
          echo "    apply plugin: 'com.google.gms.google-services'" >> android/app/build.gradle
          echo "}" >> android/app/build.gradle
          
          # Verify our changes
          echo "=== Modified app/build.gradle content after Google Services fixes: ==="
          cat android/app/build.gradle | tail -10
          echo "=== End of Google Services section ==="
          
          # Validate gradle file structure by checking for balanced braces
          echo "Validating build.gradle structure..."
          OPEN_BRACES=$(grep -o "{" android/app/build.gradle | wc -l)
          CLOSE_BRACES=$(grep -o "}" android/app/build.gradle | wc -l)
          echo "Open braces: $OPEN_BRACES, Close braces: $CLOSE_BRACES"
          
          if [ "$OPEN_BRACES" != "$CLOSE_BRACES" ]; then
            echo "ERROR: Unbalanced braces in build.gradle file!"
            echo "Attempting to fix by restoring the original and using a more careful approach..."
            
            # Restore original and use a different approach
            cp /tmp/build.gradle.original android/app/build.gradle
            
            # Remove only exact patterns we know are problematic without modifying structure
            sed -i 's/try {\s*def servicesJSON = file(.*)\/\/ Simple Google Services check/\/\/ Simple Google Services check/' android/app/build.gradle
            
            # Add our simple check at the end
            echo "" >> android/app/build.gradle
            echo "// Simple Google Services check" >> android/app/build.gradle
            echo "if (file('google-services.json').exists()) {" >> android/app/build.gradle
            echo "    apply plugin: 'com.google.gms.google-services'" >> android/app/build.gradle
            echo "}" >> android/app/build.gradle
            
            # Re-validate
            OPEN_BRACES=$(grep -o "{" android/app/build.gradle | wc -l)
            CLOSE_BRACES=$(grep -o "}" android/app/build.gradle | wc -l)
            echo "After fix: Open braces: $OPEN_BRACES, Close braces: $CLOSE_BRACES"
            
            # Final check - if still unbalanced, just create a simple version from scratch
            if [ "$OPEN_BRACES" != "$CLOSE_BRACES" ]; then
              echo "WARNING: Still having issues with build.gradle - trying minimal approach"
              
              # Identify the essential sections to preserve (repositories, dependencies, defaultConfig)
              REPOS=$(grep -A 10 "repositories {" /tmp/build.gradle.original)
              DEPS=$(grep -A 20 "dependencies {" /tmp/build.gradle.original)
              DEFAULT_CONFIG=$(grep -A 10 "defaultConfig {" /tmp/build.gradle.original)
              
              # Create a very simple build.gradle with just the essential parts
              echo "apply plugin: 'com.android.application'" > android/app/build.gradle
              echo "" >> android/app/build.gradle
              echo "android {" >> android/app/build.gradle
              echo "    compileSdkVersion rootProject.ext.compileSdkVersion" >> android/app/build.gradle
              echo "    defaultConfig {" >> android/app/build.gradle
              echo "        applicationId \"com.runstr.app\"" >> android/app/build.gradle
              echo "        minSdkVersion rootProject.ext.minSdkVersion" >> android/app/build.gradle
              echo "        targetSdkVersion rootProject.ext.targetSdkVersion" >> android/app/build.gradle
              echo "        versionCode 1" >> android/app/build.gradle
              echo "        versionName \"1.0\"" >> android/app/build.gradle
              echo "        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"" >> android/app/build.gradle
              echo "        aaptOptions {" >> android/app/build.gradle
              echo "            cruncherEnabled false" >> android/app/build.gradle
              echo "        }" >> android/app/build.gradle
              echo "    }" >> android/app/build.gradle
              echo "" >> android/app/build.gradle
              echo "    signingConfigs {" >> android/app/build.gradle
              echo "        release {" >> android/app/build.gradle
              echo "            storeFile file(\"release.keystore\")" >> android/app/build.gradle
              echo "            storePassword \"${{ secrets.KEY_STORE_PASSWORD }}\"" >> android/app/build.gradle
              echo "            keyAlias \"${{ secrets.KEY_ALIAS }}\"" >> android/app/build.gradle
              echo "            keyPassword \"${{ secrets.KEY_PASSWORD }}\"" >> android/app/build.gradle
              echo "        }" >> android/app/build.gradle
              echo "    }" >> android/app/build.gradle
              echo "" >> android/app/build.gradle
              echo "    buildTypes {" >> android/app/build.gradle
              echo "        release {" >> android/app/build.gradle
              echo "            minifyEnabled false" >> android/app/build.gradle
              echo "            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'" >> android/app/build.gradle
              echo "            signingConfig signingConfigs.release" >> android/app/build.gradle
              echo "        }" >> android/app/build.gradle
              echo "    }" >> android/app/build.gradle
              echo "" >> android/app/build.gradle
              echo "    compileOptions {" >> android/app/build.gradle
              echo "        sourceCompatibility JavaVersion.VERSION_17" >> android/app/build.gradle
              echo "        targetCompatibility JavaVersion.VERSION_17" >> android/app/build.gradle
              echo "    }" >> android/app/build.gradle
              echo "}" >> android/app/build.gradle
              echo "" >> android/app/build.gradle
              echo "repositories {" >> android/app/build.gradle
              echo "    google()" >> android/app/build.gradle
              echo "    mavenCentral()" >> android/app/build.gradle
              echo "    flatDir {" >> android/app/build.gradle
              echo "        dirs 'libs'" >> android/app/build.gradle
              echo "        dirs 'capacitor-cordova-android-plugins/src/main/libs'" >> android/app/build.gradle
              echo "    }" >> android/app/build.gradle
              echo "}" >> android/app/build.gradle
              echo "" >> android/app/build.gradle
              echo "dependencies {" >> android/app/build.gradle
              echo "    implementation fileTree(include: ['*.jar'], dir: 'libs')" >> android/app/build.gradle
              echo "    implementation \"androidx.appcompat:appcompat:\$androidxAppCompatVersion\"" >> android/app/build.gradle
              echo "    implementation project(':capacitor-android')" >> android/app/build.gradle
              echo "    implementation project(':capacitor-cordova-android-plugins')" >> android/app/build.gradle
              echo "    testImplementation \"junit:junit:\$junitVersion\"" >> android/app/build.gradle
              echo "    androidTestImplementation \"androidx.test.ext:junit:\$androidxJunitVersion\"" >> android/app/build.gradle
              echo "    androidTestImplementation \"androidx.test.espresso:espresso-core:\$androidxEspressoCoreVersion\"" >> android/app/build.gradle
              echo "}" >> android/app/build.gradle
              echo "" >> android/app/build.gradle
              echo "apply from: 'capacitor.build.gradle'" >> android/app/build.gradle
              echo "" >> android/app/build.gradle
              echo "// Simple Google Services check" >> android/app/build.gradle
              echo "if (file('google-services.json').exists()) {" >> android/app/build.gradle
              echo "    apply plugin: 'com.google.gms.google-services'" >> android/app/build.gradle
              echo "}" >> android/app/build.gradle

              # Replace placeholder variables with actual secrets
              sed -i "s/\${KEY_STORE_PASSWORD}/${{ secrets.KEY_STORE_PASSWORD }}/g" android/app/build.gradle
              sed -i "s/\${KEY_ALIAS}/${{ secrets.KEY_ALIAS }}/g" android/app/build.gradle
              sed -i "s/\${KEY_PASSWORD}/${{ secrets.KEY_PASSWORD }}/g" android/app/build.gradle

              echo "=== Finished creating simplified build.gradle ==="
              echo "Validating structure of new build.gradle file..."
              OPEN_BRACES=$(grep -o "{" android/app/build.gradle | wc -l)
              CLOSE_BRACES=$(grep -o "}" android/app/build.gradle | wc -l)
              echo "Open braces: $OPEN_BRACES, Close braces: $CLOSE_BRACES"
              
              # Look for critical elements to make sure they exist
              echo "Checking for critical build.gradle elements..."
              grep -q "apply plugin: 'com.android.application'" android/app/build.gradle && echo "✓ Found application plugin" || echo "✗ Missing application plugin"
              grep -q "signingConfigs" android/app/build.gradle && echo "✓ Found signing configs" || echo "✗ Missing signing configs"
              grep -q "dependencies" android/app/build.gradle && echo "✓ Found dependencies section" || echo "✗ Missing dependencies section"
              grep -q "repositories" android/app/build.gradle && echo "✓ Found repositories section" || echo "✗ Missing repositories section"
              grep -q "google-services" android/app/build.gradle && echo "✓ Found Google Services check" || echo "✗ Missing Google Services check"
              
              # Check for any remaining servicesJSON references
              if grep -q "servicesJSON" android/app/build.gradle; then
                echo "WARNING: build.gradle still contains servicesJSON references!"
                grep -n "servicesJSON" android/app/build.gradle
              fi
            fi
          fi
          
          # Java 17 compatibility updates
          sed -i 's/sourceCompatibility JavaVersion.VERSION_1_8/sourceCompatibility JavaVersion.VERSION_17/g' android/app/build.gradle
          sed -i 's/targetCompatibility JavaVersion.VERSION_1_8/targetCompatibility JavaVersion.VERSION_17/g' android/app/build.gradle
          sed -i 's/sourceCompatibility = JavaVersion.VERSION_1_8/sourceCompatibility = JavaVersion.VERSION_17/g' android/app/build.gradle
          sed -i 's/targetCompatibility = JavaVersion.VERSION_1_8/targetCompatibility = JavaVersion.VERSION_17/g' android/app/build.gradle
          
          # Add AAPT options
          if ! grep -q "aaptOptions" android/app/build.gradle; then
            sed -i '/defaultConfig {/,/}/a\\n    aaptOptions {\n        cruncherEnabled false\n    }' android/app/build.gradle
          fi
          
          # Add signing configuration if not present
          if ! grep -q "signingConfigs" android/app/build.gradle; then
            sed -i '/defaultConfig {/,/}/a\\n    signingConfigs {\n        release {\n            storeFile file("release.keystore")\n            storePassword "'${{ secrets.KEY_STORE_PASSWORD }}'"\n            keyAlias "'${{ secrets.KEY_ALIAS }}'"\n            keyPassword "'${{ secrets.KEY_PASSWORD }}'"\n        }\n    }' android/app/build.gradle
            sed -i '/release {/,/}/s/}/    signingConfig signingConfigs.release\n}/' android/app/build.gradle
          fi
          
          # Add repositories fix for flatDir
          if grep -q "flatDir" android/app/build.gradle; then
            sed -i 's/flatDir\s*{/flatDir {\n        dirs += ["libs"]\n        dirs += [file("capacitor-cordova-android-plugins\/src\/main\/libs")]\n        /' android/app/build.gradle
          fi
          
          # Verify the file is valid
          echo "Final app/build.gradle content:"
          cat android/app/build.gradle

      # Grant execute permissions for Gradle wrapper
      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./android/gradlew

      # Build Release APK
      - name: Build Release APK
        id: build_apk
        run: |
          cd android
          
          # Clean project
          ./gradlew clean
          
          # List all available tasks for debugging
          ./gradlew tasks
          
          # Try to build debug APK with more memory and detailed logging
          ./gradlew --no-daemon --max-workers=2 -Dorg.gradle.jvmargs="-Xmx4g" assembleDebug --stacktrace --info || {
            echo "Debug build failed, checking project structure"
            ls -la
            cat app/build.gradle || echo "app/build.gradle not found"
            exit 1
          }
          
          # Only attempt release build if debug was successful
          ./gradlew --no-daemon assembleRelease --info || {
            echo "Release build failed, using debug APK as fallback"
            # If debug build succeeded, use it as our release APK
            if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
              mkdir -p app/build/outputs/apk/release
              cp app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/release/app-release-unsigned.apk
              echo "Using debug APK as release APK"
            else
              echo "Both release and debug builds failed"
              exit 1
            fi
          }

      # Locate the APK file
      - name: Locate APK file
        id: locate_apk
        run: |
          APK_PATH=$(find android -name "app-release-unsigned.apk" -o -name "app-release.apk" | head -n 1)
          if [ -z "$APK_PATH" ]; then
            APK_PATH=$(find android -name "app-debug.apk" | head -n 1)
          fi
          if [ -z "$APK_PATH" ]; then
            echo "No APK found"
            exit 1
          fi
          echo "APK found at: $APK_PATH"
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV

      # Sign APK with apksigner
      - name: Sign APK with apksigner
        id: sign_app
        run: |
          # Find the latest build tools version
          BUILD_TOOLS_VERSION=$(ls -1 $ANDROID_SDK_ROOT/build-tools/ | sort -V | tail -n 1)
          APKSIGNER="$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION/apksigner"
          
          mkdir -p android/app/build/outputs/apk/release/signed
          SIGNED_APK="android/app/build/outputs/apk/release/signed/app-release-signed.apk"
          
          "$APKSIGNER" sign --verbose \
            --ks release.keystore \
            --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
            --ks-pass pass:"${{ secrets.KEY_STORE_PASSWORD }}" \
            --key-pass pass:"${{ secrets.KEY_PASSWORD }}" \
            --out "$SIGNED_APK" \
            "${{ env.APK_PATH }}"
          
          # Verify signing
          "$APKSIGNER" verify --verbose "$SIGNED_APK"
          
          echo "SIGNED_APK=$SIGNED_APK" >> $GITHUB_ENV
          echo "signedReleaseFile=$SIGNED_APK" >> $GITHUB_OUTPUT

      # Create a Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: 'Release ${{ env.RELEASE_TAG }}'
          files: ${{ env.SIGNED_APK }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Setup for Zap.Store publishing
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1.6.5
      
      - name: Get Zap.Store CLI
        run: |
          git clone https://github.com/zapstore/zapstore-cli.git
          cd zapstore-cli
          git fetch --tags
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/zapstore/zapstore-cli/releases/latest)
          TAG_NAME=$(echo $LATEST_RELEASE | jq -r .tag_name)
          git checkout $TAG_NAME
          dart pub get
          dart compile exe lib/main.dart -o build
          chmod +x build
      
      # Publish to Zap.Store
      - name: Publish to Zap.Store
        env:
          NSEC: ${{ secrets.NSEC }}
        run: |
          # Check if NSEC secret is set
          if [ -z "$NSEC" ]; then
            echo "Error: NSEC secret is not set"
            exit 1
          fi
          
          BUILD_TOOLS_VERSION=$(ls -1 $ANDROID_SDK_ROOT/build-tools/ | sort -V | tail -n 1)
          APKSIGNER_PATH="$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION/apksigner"
          
          cd zapstore-cli
          ./build publish "RUNSTR" --apk-path="${{ env.SIGNED_APK }}" --apksigner-path="$APKSIGNER_PATH" || {
            echo "First attempt failed, trying alternative format"
            ./build publish "RUNSTR" "${{ env.SIGNED_APK }}"
          }