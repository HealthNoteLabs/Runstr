name: Build, Sign and Release to Zap.Store

on:
  push:
    branches:
      - Simple-updates
      - updates1 # Added feed branch to automatically trigger the workflow
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    name: Build, Sign and Release APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      # Extract version from package.json
      - name: Get Version from package.json
        id: package_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      # Generate timestamp for uniqueness
      - name: Generate Timestamp
        id: timestamp
        run: echo "DATE=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      # Generate release tag dynamically
      - name: Generate Release Tag
        id: release_tag
        run: echo "RELEASE_TAG=feed-${{ env.VERSION }}-${{ env.DATE }}" >> $GITHUB_ENV

      # Build the React app
      - name: Build React app
        run: npm run build

      # Install Capacitor CLI if not installed globally
      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      # Sync React build with Android platform
      - name: Sync Capacitor with Android
        run: npx cap sync android

      # Setup Java for Android build - changed to JDK 17 for compatibility with Zap.Store
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Verify JDK version
      - name: Verify Java version
        run: |
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "Using Java from: $JAVA_HOME"
          java -version
          javac -version

      # Setup Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Grant execute permissions for Gradle wrapper
      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./android/gradlew

      # Fix Java version - comprehensive approach
      - name: Patch Java version (comprehensive)
        run: |
          echo "=== Starting Java version patching ==="
          
          # Create direct compiler override in app module
          echo "Creating direct compiler override for app module"
          mkdir -p android/app/src/main/java
          cat > android/app/build.gradle.override << EOF
          // Direct override for Java compilation
          tasks.withType(JavaCompile) {
              options.compilerArgs.add('-source')
              options.compilerArgs.add('17')
              options.compilerArgs.add('-target')
              options.compilerArgs.add('17')
              options.release.set(17)
              sourceCompatibility = JavaVersion.VERSION_17
              targetCompatibility = JavaVersion.VERSION_17
          }
          EOF
          
          # Apply the override
          echo "apply from: 'build.gradle.override'" >> android/app/build.gradle
          
          # Check all build.gradle files for Java version references
          echo "Patching all build.gradle files:"
          find . -name "build.gradle" -o -name "*.gradle.kts" | while read file; do
            echo "Checking file: $file"
            if grep -q "VERSION_21\|Java 21\|JavaVersion.VERSION_21\|jvmTarget = \"21\"" "$file"; then
              echo "Found Java 21 reference in $file, patching..."
              sed -i 's/VERSION_21/VERSION_17/g' "$file"
              sed -i 's/Java 21/Java 17/g' "$file"
              sed -i 's/JavaVersion.VERSION_21/JavaVersion.VERSION_17/g' "$file"
              sed -i 's/jvmTarget = "21"/jvmTarget = "17"/g' "$file"
              sed -i 's/sourceCompatibility = JavaVersion.VERSION_21/sourceCompatibility = JavaVersion.VERSION_17/g' "$file"
              sed -i 's/targetCompatibility = JavaVersion.VERSION_21/targetCompatibility = JavaVersion.VERSION_17/g' "$file"
              sed -i 's/sourceCompatibility JavaVersion.VERSION_21/sourceCompatibility JavaVersion.VERSION_17/g' "$file"
              sed -i 's/targetCompatibility JavaVersion.VERSION_21/targetCompatibility JavaVersion.VERSION_17/g' "$file"
            fi
          done
          
          # Create or update android/gradle.properties to enforce Java 17
          echo "Ensuring Java 17 in gradle.properties"
          if [ -f "android/gradle.properties" ]; then
            # Remove any existing Java version settings
            sed -i '/org.gradle.java.home/d' android/gradle.properties
            # Add our Java 17 setting
            echo "org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 --add-opens java.base/java.io=ALL-UNNAMED" >> android/gradle.properties
            echo "org.gradle.java.home=${JAVA_HOME}" >> android/gradle.properties
          fi
          
          # Create a temporary local.properties to override Java version
          echo "Creating local.properties override"
          echo "org.gradle.java.home=${JAVA_HOME}" > android/local.properties
          
          # For Kotlin code: make sure we're using JVM 17
          echo "Patching Kotlin jvmTarget"
          find . -name "*.gradle" -o -name "*.gradle.kts" | xargs sed -i 's/jvmTarget = "21"/jvmTarget = "17"/g'
          
          echo "=== Java version patching complete ==="

      # Generate keystore for signing
      - name: Generate Keystore
        run: |
          keytool -genkey -v -keystore app-keystore.jks -alias ${{ secrets.KEY_ALIAS }} -keyalg RSA -keysize 2048 -validity 10000 -storepass ${{ secrets.KEY_STORE_PASSWORD }} -keypass ${{ secrets.KEY_PASSWORD }} -dname "cn=Unknown, ou=Unknown, o=Unknown, c=US"

      # Build Release APK instead of Debug
      - name: Build Release APK
        run: |
          cd android
          # Explicitly set Java home for Gradle with direct Java 17 flags
          ./gradlew -Dorg.gradle.java.home="$JAVA_HOME" \
            -Pjava.home="$JAVA_HOME" \
            -PcompileJava.source=17 \
            -PcompileJava.target=17 \
            -PcompileJava.release=17 \
            -PcompileJava.sourceCompatibility=17 \
            -PcompileJava.targetCompatibility=17 \
            --warning-mode all \
            assembleRelease \
            --stacktrace

      # Sign the release APK
      - name: Sign APK
        id: sign_app
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY_BASE64 || 'skip' }}
          keyStoreFile: app-keystore.jks
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      # Create a Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: 'Release ${{ env.RELEASE_TAG }}'
          draft: false
          prerelease: true

      # Upload Signed APK to Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.sign_app.outputs.signedReleaseFile }}
          asset_name: app-release-signed.apk
          asset_content_type: application/vnd.android.package-archive

      # Setup for Zap.Store publishing
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1.6.5
      
      - name: Install Apktool
        run: |
          wget "https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool"
          wget "https://github.com/iBotPeaches/Apktool/releases/download/v2.10.0/apktool_2.10.0.jar"
          mv apktool_2.10.0.jar apktool.jar
          sudo cp apktool /usr/local/bin
          sudo cp apktool.jar /usr/local/bin
          sudo chmod +x /usr/local/bin/apktool
          sudo chmod +x /usr/local/bin/apktool.jar
      
      - name: Get Zap.Store CLI
        run: |
          mkdir -p /home/runner/.zapstore
          git clone https://github.com/zapstore/zapstore-cli.git
          cd zapstore-cli
          git fetch --tags
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/zapstore/zapstore-cli/releases/latest)
          TAG_NAME=$(echo $LATEST_RELEASE | jq -r .tag_name)
          git checkout $TAG_NAME
          dart pub get
          dart compile exe lib/main.dart -o build
      
      - name: Publish to Zap.Store
        env:
          NSEC: ${{ secrets.NSEC }}
        run: |
          cd $GITHUB_WORKSPACE
          APKSIGNER_PATH=$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner ./zapstore-cli/build publish "RUNSTR"