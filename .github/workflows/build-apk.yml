name: Build, Sign and Release to Zap.Store

on:
  push:
    branches:
      - Simple-updates
      - updates1
  workflow_dispatch:

jobs:
  build:
    name: Build, Sign and Release APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Java 17 specifically for Zap.Store compatibility
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Verify Java version
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          javac -version

      - name: Install dependencies
        run: npm ci

      # Extract version and generate release tag
      - name: Configure version information
        id: version_info
        run: |
          echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
          echo "RELEASE_TAG=feed-${{ env.VERSION }}-${{ env.DATE }}" >> $GITHUB_ENV

      # Build the React app
      - name: Build React app
        run: npm run build

      # Generate keystore for signing
      - name: Generate Keystore
        id: generate_keystore
        run: |
          # Check if KEY_ALIAS, KEY_STORE_PASSWORD, and KEY_PASSWORD are set
          if [ -z "${{ secrets.KEY_ALIAS }}" ] || [ -z "${{ secrets.KEY_STORE_PASSWORD }}" ] || [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "Error: Required secrets (KEY_ALIAS, KEY_STORE_PASSWORD, KEY_PASSWORD) are not set"
            exit 1
          fi
          
          keytool -genkey -v -keystore release.keystore \
            -alias ${{ secrets.KEY_ALIAS }} \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass ${{ secrets.KEY_STORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            -dname "cn=Unknown, ou=Unknown, o=Unknown, c=US"
          
          # Make a copy of the keystore in android/app/ directory
          mkdir -p android/app/
          cp release.keystore android/app/release.keystore

      # Setup Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Sync React build with Android platform
      - name: Sync Capacitor with Android
        run: npx cap sync android

      # Prepare Android project for Java 17 compatibility
      - name: Configure Android project for Java 17
        run: |
          # Create gradle.properties with Java 17 settings
          cat > android/gradle.properties << EOF
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED
          org.gradle.java.home=${JAVA_HOME}
          android.useAndroidX=true
          android.enableJetifier=true
          kotlin.jvm.target.validation.mode=warning
          EOF
          
          # Configure signing in app/build.gradle
          if ! grep -q "signingConfigs" android/app/build.gradle; then
            sed -i '/defaultConfig {/,/}/a\\n    signingConfigs {\n        release {\n            storeFile file("release.keystore")\n            storePassword "'${{ secrets.KEY_STORE_PASSWORD }}'"\n            keyAlias "'${{ secrets.KEY_ALIAS }}'"\n            keyPassword "'${{ secrets.KEY_PASSWORD }}'"\n        }\n    }' android/app/build.gradle
            sed -i '/release {/,/}/s/}/    signingConfig signingConfigs.release\n}/' android/app/build.gradle
          fi
          
          # Fix Java 17 compatibility in build.gradle
          sed -i 's/sourceCompatibility JavaVersion.VERSION_1_8/sourceCompatibility JavaVersion.VERSION_17/' android/app/build.gradle || echo "No Java 8 reference to update"
          sed -i 's/targetCompatibility JavaVersion.VERSION_1_8/targetCompatibility JavaVersion.VERSION_17/' android/app/build.gradle || echo "No Java 8 reference to update"
          sed -i 's/sourceCompatibility = JavaVersion.VERSION_1_8/sourceCompatibility = JavaVersion.VERSION_17/' android/app/build.gradle || echo "No Java 8 reference to update"
          sed -i 's/targetCompatibility = JavaVersion.VERSION_1_8/targetCompatibility = JavaVersion.VERSION_17/' android/app/build.gradle || echo "No Java 8 reference to update"
          
          # Disable AAPT2 crunching to avoid resource processing issues
          if ! grep -q "aaptOptions" android/app/build.gradle; then
            sed -i '/defaultConfig {/,/}/a\\n    aaptOptions {\n        cruncherEnabled false\n    }' android/app/build.gradle
          fi

      # Grant execute permissions for Gradle wrapper
      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./android/gradlew

      # Build Release APK
      - name: Build Release APK
        id: build_apk
        run: |
          cd android
          
          # Clean project
          ./gradlew clean
          
          # Build release APK with detailed logging
          ./gradlew assembleRelease --info || {
            echo "Release build failed, attempting to build debug APK as fallback"
            ./gradlew assembleDebug --info
            
            # If debug build succeeds, use it as our release APK
            if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
              mkdir -p app/build/outputs/apk/release
              cp app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/release/app-release-unsigned.apk
              echo "Using debug APK as release APK"
            else
              echo "Both release and debug builds failed"
              exit 1
            fi
          }

      # Locate the APK file
      - name: Locate APK file
        id: locate_apk
        run: |
          APK_PATH=$(find android -name "app-release-unsigned.apk" -o -name "app-release.apk" | head -n 1)
          if [ -z "$APK_PATH" ]; then
            APK_PATH=$(find android -name "app-debug.apk" | head -n 1)
          fi
          if [ -z "$APK_PATH" ]; then
            echo "No APK found"
            exit 1
          fi
          echo "APK found at: $APK_PATH"
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV

      # Sign APK with apksigner
      - name: Sign APK with apksigner
        id: sign_app
        run: |
          # Find the latest build tools version
          BUILD_TOOLS_VERSION=$(ls -1 $ANDROID_SDK_ROOT/build-tools/ | sort -V | tail -n 1)
          APKSIGNER="$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION/apksigner"
          
          mkdir -p android/app/build/outputs/apk/release/signed
          SIGNED_APK="android/app/build/outputs/apk/release/signed/app-release-signed.apk"
          
          "$APKSIGNER" sign --verbose \
            --ks release.keystore \
            --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
            --ks-pass pass:"${{ secrets.KEY_STORE_PASSWORD }}" \
            --key-pass pass:"${{ secrets.KEY_PASSWORD }}" \
            --out "$SIGNED_APK" \
            "${{ env.APK_PATH }}"
          
          # Verify signing
          "$APKSIGNER" verify --verbose "$SIGNED_APK"
          
          echo "SIGNED_APK=$SIGNED_APK" >> $GITHUB_ENV
          echo "signedReleaseFile=$SIGNED_APK" >> $GITHUB_OUTPUT

      # Create a Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: 'Release ${{ env.RELEASE_TAG }}'
          files: ${{ env.SIGNED_APK }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Setup for Zap.Store publishing
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1.6.5
      
      - name: Get Zap.Store CLI
        run: |
          git clone https://github.com/zapstore/zapstore-cli.git
          cd zapstore-cli
          git fetch --tags
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/zapstore/zapstore-cli/releases/latest)
          TAG_NAME=$(echo $LATEST_RELEASE | jq -r .tag_name)
          git checkout $TAG_NAME
          dart pub get
          dart compile exe lib/main.dart -o build
          chmod +x build
      
      # Publish to Zap.Store
      - name: Publish to Zap.Store
        env:
          NSEC: ${{ secrets.NSEC }}
        run: |
          # Check if NSEC secret is set
          if [ -z "$NSEC" ]; then
            echo "Error: NSEC secret is not set"
            exit 1
          fi
          
          BUILD_TOOLS_VERSION=$(ls -1 $ANDROID_SDK_ROOT/build-tools/ | sort -V | tail -n 1)
          APKSIGNER_PATH="$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION/apksigner"
          
          cd zapstore-cli
          ./build publish "RUNSTR" --apk-path="${{ env.SIGNED_APK }}" --apksigner-path="$APKSIGNER_PATH" || {
            echo "First attempt failed, trying alternative format"
            ./build publish "RUNSTR" "${{ env.SIGNED_APK }}"
          }